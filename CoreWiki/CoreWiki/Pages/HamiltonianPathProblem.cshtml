@page
@model CoreWiki.Pages.HamiltonianPathProblemModel
@{
    ViewData["Title"] = "HamiltonianPathProblem";
}

<h2>Hamiltonian Path Problem</h2>
<hr/>
<div>
    <p>
        In the mathematical field of graph theory the Hamiltonian path problem and the Hamiltonian cycle problem are problems of determining whether a Hamiltonian path (a path in an undirected or directed graph that visits each vertex exactly once) or a Hamiltonian cycle exists in a given graph (whether directed or undirected). Both problems are NP-complete.
    </p>
    <p>
        The Hamiltonian cycle problem is a special case of the travelling salesman problem, obtained by setting the distance between two cities to one if they are adjacent and two otherwise, and verifying that the total distance travelled is equal to n (if so, the route is a Hamiltonian circuit; if there is no Hamiltonian circuit then the shortest route will be longer).
    </p>
</div>
<hr/>
<div class="contents" style="box-sizing: content-box;width: 500px;height: 125px;padding: 2px; border: 2px solid black;">
    <h3>Contents</h3>
    <ol>
        <li><a href="#BTP">	Reduction between the path problem and the cycle problem</a></li>
        <li><a href="#FT">Algorithms</a></li>
        <li><a href="#Con">Complexity</a></li>
    </ol>
</div>

<div>
    <h3 id="BTP">Reduction between the path problem and the cycle problem</h3>
    <hr />
    <p>
        There is a simple relation between the problems of finding a Hamiltonian path and a Hamiltonian cycle:
        <ul>
            <li>
                In one direction, the Hamiltonian path problem for graph G is equivalent to the Hamiltonian cycle problem in a graph H obtained from G by adding a new vertex x and connecting x to all vertices of G. Thus, finding a Hamiltonian path cannot be significantly slower (in the worst case, as a function of the number of vertices) than finding a Hamiltonian cycle.
            </li>
            <li>
                In the other direction, the Hamiltonian cycle problem for a graph G is equivalent to the Hamiltonian path problem in the graph H obtained by copying one vertex v of G, v', that is, letting v' have the same neighbourhood as v, and by adding two dummy vertices of degree one, and connecting them with v and v', respectively.
            </li>
        </ul>
    </p>
</div>

<div>
    <h3 id="FT">Algorithms</h3>
    <hr />
    <p>
        There are n! different sequences of vertices that might be Hamiltonian paths in a given n-vertex graph (and are, in a complete graph), so a brute force search algorithm that tests all possible sequences would be very slow. An early exact algorithm for finding an Hamiltonian cycle on a directed graph was the enumerative algorithm of Martello[3]. A search procedure by Frank Rubin[4] divides the edges of the graph into three classes: those that must be in the path, those that cannot be in the path, and undecided. As the search proceeds, a set of decision rules classifies the undecided edges, and determines whether to halt or continue the search. The algorithm divides the graph into components that can be solved separately. Also, a dynamic programming algorithm of Bellman, Held, and Karp can be used to solve the problem in time O(n2 2n). In this method, one determines, for each set S of vertices and each vertex v in S, whether there is a path that covers exactly the vertices in S and ends at v. For each choice of S and v, a path exists for (S,v) if and only if v has a neighbor w such that a path exists for (S − v,w), which can be looked up from already-computed information in the dynamic program
    </p>
    <p>
        Andreas Björklund provided an alternative approach using the inclusion–exclusion principle to reduce the problem of counting the number of Hamiltonian cycles to a simpler counting problem, of counting cycle covers, which can be solved by computing certain matrix determinants. Using this method, he showed how to solve the Hamiltonian cycle problem in arbitrary n-vertex graphs by a Monte Carlo algorithm in time O(1.657n); for bipartite graphs this algorithm can be further improved to time o(1.415<sup>n</sup>).
    </p>

    <p>
        For graphs of maximum degree three, a careful backtracking search can find a Hamiltonian cycle (if one exists) in time O(1.251<sup>n</sup>).
    </p>
    <p>
        Hamiltonian paths and cycles can be found using a SAT solver
    </p>
    <p>
        Because of the difficulty of solving the Hamiltonian path and cycle problems on conventional computers, they have also been studied in unconventional models of computing. For instance, Leonard Adleman showed that the Hamiltonian path problem may be solved using a DNA computer. Exploiting the parallelism inherent in chemical reactions, the problem may be solved using a number of chemical reaction steps linear in the number of vertices of the graph; however, it requires a factorial number of DNA molecules to participate in the reaction
    </p>
    <p>
        An optical solution to the Hamiltonian problem has been proposed in [10]. The idea is to create a graph-like structure made from optical cables and beam splitters which are traversed by light in order to construct a solution for the problem. The weak point of this approach is the required amount of energy which is exponential in the number of nodes.
    </p>
</div>

<div>
    <h3 id="Con">Complexity</h3>
    <hr />
    <p>
        The problem of finding a Hamiltonian cycle or path is in FNP; the analogous decision problem is to test whether a Hamiltonian cycle or path exists. The directed and undirected Hamiltonian cycle problems were two of Karp's 21 NP-complete problems. They remain NP-complete even for special kinds of graphs, such as:
        <ul>
            <li>bipartite graphs,</li>
            <li>undirected planar graphs of maximum degree three,</li>
            <li>directed planar graphs with indegree and outdegree at most two,</li>
            <li>bridgeless undirected planar 3-regular bipartite graphs,</li>
            <li>3-connected 3-regular bipartite graphs,</li>
            <li>subgraphs of the square grid graph.</li>
        </ul>
    </p>
    <p>
        However, for some special classes of graphs, the problem can be solved in polynomial time:
        <ul>
            <li>4-connected planar graphs are always Hamiltonian by a result due to Tutte, and the computational task of finding a Hamiltonian cycle in these graphs can be carried out in linear time by computing a so-called Tutte path.</li>
            <li>Tutte proved this result by showing that every 2-connected planar graph contains a Tutte path. Tutte paths in turn can be computed in quadratic time even for 2-connected planar graphs, which may be used to find Hamiltonian cycles and long cycles in generalizations of planar graphs.</li>
        </ul>
    </p>
    <p>
        In graphs in which all vertices have odd degree, an argument related to the handshaking lemma shows that the number of Hamiltonian cycles through any fixed edge is always even, so if one Hamiltonian cycle is given, then a second one must also exist.[19] However, finding this second cycle does not seem to be an easy computational task. Papadimitriou defined the complexity class PPA to encapsulate problems such as this one
    </p>
    <p>
        Putting all of these conditions together, it remains open whether 3-connected 3-regular bipartite planar graphs must always contain a Hamiltonian cycle, in which case the problem restricted to those graphs could not be NP-complete; see Barnette's conjecture.
    </p>
</div>